/* (303852) & (307874)

Data Structure [Project] -> Mental Health Patient Monitor and Recommendations System */

import java.awt.*;
import java.util.LinkedList;
import java.util.Queue;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

//interface for patient operation
interface PatientOperations {
    void addPatient(PatientInformation patient);
    void updatePatient(String name, PatientInformation updatedInfo);
    void deletePatient(String name);
    void searchPatient(String name);
    void displayAllPatients();
}

public class MentalHealthProject implements PatientOperations {

    //The linked type of LIST (OR QUEUE) is ONLY mandatory for the PROJECT.
    private Queue<PatientInformation> infoQueue = new LinkedList<>();
    private DefaultTableModel tableModel;

    private JFrame frame;
    private JTable displayTable;
    private JTextField nameField, ageField, addressField, medHistoryField, contactField;
    private JRadioButton maleButton, femaleButton;
    private JButton addButton, updateButton, deleteButton, searchButton, displayButton, exitButton;

    //main
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new MentalHealthProject().createAndShowGUI());
    }

    public void createAndShowGUI() {
        frame = new JFrame("Mental Health Patient Information Management and Recommendation System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(900, 600);
        frame.setLayout(new BorderLayout());

        //input panel
        JPanel inputPanel = new JPanel(new GridLayout(6, 2));
        inputPanel.setBorder(BorderFactory.createTitledBorder("Patient Information"));

        nameField = new JTextField();
        ageField = new JTextField();
        addressField = new JTextField();
        medHistoryField = new JTextField();
        contactField = new JTextField();

        JPanel genderPanel = new JPanel(new FlowLayout());
        maleButton = new JRadioButton("Male");
        femaleButton = new JRadioButton("Female");
        ButtonGroup genderGroup = new ButtonGroup();
        genderGroup.add(maleButton);
        genderGroup.add(femaleButton);
        genderPanel.add(maleButton);
        genderPanel.add(femaleButton);

        inputPanel.add(new JLabel("Name:"));
        inputPanel.add(nameField);
        inputPanel.add(new JLabel("Age:"));
        inputPanel.add(ageField);
        inputPanel.add(new JLabel("Gender:"));
        inputPanel.add(genderPanel);
        inputPanel.add(new JLabel("Address:"));
        inputPanel.add(addressField);
        inputPanel.add(new JLabel("Medical History [Ex: anxiety, depression, stress, bipolar, insomnia]:"));
        inputPanel.add(medHistoryField);
        inputPanel.add(new JLabel("Contact:"));
        inputPanel.add(contactField);

        String[] columnNames = {"Name", "Age", "Gender", "Address", "Medical History", "Contact", "Recommendation"};
        tableModel = new DefaultTableModel(columnNames, 0);
        displayTable = new JTable(tableModel);
        displayTable.getTableHeader().setReorderingAllowed(false);
        displayTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        displayTable.getColumnModel().getColumn(6).setPreferredWidth(300);

        JPanel tablePanel = new JPanel(new BorderLayout());
        tablePanel.setBorder(BorderFactory.createTitledBorder("Patient Information"));
        tablePanel.add(displayTable.getTableHeader(), BorderLayout.NORTH);
        tablePanel.add(displayTable, BorderLayout.CENTER);

        //button panel
        JPanel buttonPanel = new JPanel(new GridLayout(1, 6));
        addButton = new JButton("Add");
        updateButton = new JButton("Update");
        deleteButton = new JButton("Delete");
        searchButton = new JButton("Search");
        displayButton = new JButton("Display All");
        exitButton = new JButton("Exit");

        buttonPanel.add(addButton);
        buttonPanel.add(updateButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(searchButton);
        buttonPanel.add(displayButton);
        buttonPanel.add(exitButton);

        addButton.addActionListener(e -> addPatientInformation());
        updateButton.addActionListener(e -> updatePatientInformation());
        deleteButton.addActionListener(e -> deletePatientInformation());
        searchButton.addActionListener(e -> searchPatientInformation());
        displayButton.addActionListener(e -> displayAllPatients());
        exitButton.addActionListener(e -> System.exit(0));

        //add border to jFrame
        frame.add(inputPanel, BorderLayout.NORTH);
        frame.add(tablePanel, BorderLayout.CENTER);
        frame.add(buttonPanel, BorderLayout.SOUTH);

        frame.setVisible(true);
    }

    //add
    @Override
    public void addPatient(PatientInformation patient) {
        infoQueue.add(patient);
        tableModel.addRow(new Object[]{
            patient.name, patient.age, patient.gender, patient.address, patient.medHistory, patient.contact, getRecommendations(patient)
        });
        JOptionPane.showMessageDialog(frame, "Information added successfully");
        clearForm();
    }

    //update
    @Override
    public void updatePatient(String name, PatientInformation updatedInfo) {
        boolean found = false;
        Queue<PatientInformation> tempQueue = new LinkedList<>();

        while (!infoQueue.isEmpty()) {
            PatientInformation current = infoQueue.poll();
            if (current.name.equalsIgnoreCase(name)) {
                tempQueue.add(updatedInfo);
                found = true;
            } else {
                tempQueue.add(current);
            }
        }

        infoQueue = tempQueue;

        if (found) {
            displayAllPatients();
            JOptionPane.showMessageDialog(frame, "Information updated successfully");
        } else {
            JOptionPane.showMessageDialog(frame, "Patient not found", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    //delete
    @Override
    public void deletePatient(String name) {
        boolean found = false;
        Queue<PatientInformation> tempQueue = new LinkedList<>();

        while (!infoQueue.isEmpty()) {
            PatientInformation current = infoQueue.poll();
            if (current.name.equalsIgnoreCase(name)) {
                found = true;
            } else {
                tempQueue.add(current);
            }
        }

        infoQueue = tempQueue;

        if (found) {
            displayAllPatients();
            JOptionPane.showMessageDialog(frame, "Information deleted successfully");
        } else {
            JOptionPane.showMessageDialog(frame, "Patient not found", "Error", JOptionPane.ERROR_MESSAGE);
        }
        clearForm();
    }

    //search
    @Override
    public void searchPatient(String name) {
        tableModel.setRowCount(0);
        boolean found = false;
        for (PatientInformation info : infoQueue) {
            if (info.name.equalsIgnoreCase(name)) {
                tableModel.addRow(new Object[]{
                    info.name, info.age, info.gender, info.address, info.medHistory, info.contact, getRecommendations(info)
                });
                found = true;
                break;
            }
        }

        if (!found) {
            JOptionPane.showMessageDialog(frame, "Patient not found", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    //display all patients
    @Override
    public void displayAllPatients() {
        tableModel.setRowCount(0);
        for (PatientInformation info : infoQueue) {
            tableModel.addRow(new Object[]{
                info.name, info.age, info.gender, info.address, info.medHistory, info.contact, getRecommendations(info)
            });
        }
    }

    //recommendation
    private String getRecommendations(PatientInformation info) {
        String history = info.medHistory.toLowerCase();
        if (history.contains("anxiety")) {
            return "Try deep breathing exercises and sticking to a daily routine";
        } else if (history.contains("depression")) {
            return "Stay active and connect with positive people";
        } else if (history.contains("stress")) {
            return "Use stress management techniques like yoga or time management";
        } else if (history.contains("bipolar")) {
            return "Stick to a regular sleep schedule and follow medication intake";
        } else if (history.contains("insomnia")) {
            return "Keep a regular bedtime and try relaxation methods";
        } else {
            return "Focus on healthy habits and self-care";
        }
    }

    //clear fields
    private void clearForm() {
        nameField.setText("");
        ageField.setText("");
        addressField.setText("");
        medHistoryField.setText("");
        contactField.setText("");
        maleButton.setSelected(false);
        femaleButton.setSelected(false);
    }

    //add patient info
    private void addPatientInformation() {
        try {
            String name = nameField.getText().trim();
            int age = Integer.parseInt(ageField.getText().trim());
            String gender = maleButton.isSelected() ? "Male" : femaleButton.isSelected() ? "Female" : "";
            String address = addressField.getText().trim();
            String medHistory = medHistoryField.getText().trim();
            String contact = contactField.getText().trim();

            if (name.isEmpty() || gender.isEmpty() || address.isEmpty() || medHistory.isEmpty() || contact.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "All fields must be filled!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            PatientInformation info = new PatientInformation(name, age, gender, address, medHistory, contact);
            addPatient(info);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(frame, "Invalid input. Please enter valid data", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    //update patient info
    private void updatePatientInformation() {
        String name = nameField.getText().trim();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "Enter a name to update", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        PatientInformation updatedInfo = new PatientInformation(
            name, Integer.parseInt(ageField.getText().trim()),
            maleButton.isSelected() ? "Male" : femaleButton.isSelected() ? "Female" : "",
            addressField.getText().trim(), medHistoryField.getText().trim(), contactField.getText().trim()
        );
        updatePatient(name, updatedInfo);
    }

    //delete patient info
    private void deletePatientInformation() {
        String name = nameField.getText().trim();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "Enter a name to delete", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        deletePatient(name);
    }

    //search patient info
    private void searchPatientInformation() {
        String name = nameField.getText().trim();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "Enter a name to search", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        searchPatient(name);
    }
}

//all user var
class PatientInformation {
    String name;
    int age;
    String gender;
    String address;
    String medHistory;
    String contact;

    public PatientInformation(String name, int age, String gender, String address, String medHistory, String contact) {
        this.name = name;
        this.age = age;
        this.gender = gender;
        this.address = address;
        this.medHistory = medHistory;
        this.contact = contact;
    }
}
